import cv2
import numpy as np
import serial
from ultralytics import YOLO
import time

# --- Initialize serial communication ---
try:
    arduino = serial.Serial('COM9', 115200, timeout=1)  # Replace COM9 if needed
    time.sleep(2)  # Allow Arduino to reset
    print("Serial connection established.")
except serial.SerialException as e:
    print(f"Failed to connect to Arduino: {e}")
    exit()

# --- Load YOLOv8 model ---
model = YOLO("C:/Users/HP/Documents/college/additional work/AGRI PROJECT/gantry system/best.pt")

# --- Open external camera ---
cap = cv2.VideoCapture(1, cv2.CAP_DSHOW)
if not cap.isOpened():
    print("Failed to open external camera.")
    arduino.close()
    exit()

print("Press 'q' to quit or wait for object detection...")

# --- Coordinate offsets ---
x_offset, y_offset = -120,-65

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame.")
        break

    # Run YOLOv8 inference
    results = model.predict(source=frame, verbose=False)

    # Default coordinates
    center_x_offset, center_y_offset = -1, -1

    for result in results:
        boxes = result.boxes
        if boxes:
            for box in boxes:
                x1, y1, x2, y2 = box.xyxy[0].cpu().numpy().astype(int)
                center_x = int((x1 + x2) / 2)
                center_y = int((y1 + y2) / 2)

                # Apply coordinate offsets
                center_x_offset = center_x + x_offset
                center_y_offset = center_y + y_offset

                # Send coordinates to Arduino if within range
                if center_x_offset <= 430 and center_y_offset <= 350:
                    arduino.write(f"{center_x_offset},{center_y_offset}\n".encode())
                    print(f"Sent to Arduino: X={center_x_offset}, Y={center_y_offset}")
                else:
                    print(f"Coordinates out of range: X={center_x_offset}, Y={center_y_offset}")

                # Draw bounding box and point
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.circle(frame, (center_x_offset, center_y_offset), 5, (0, 0, 255), -1)
                cv2.putText(frame, f"({center_x_offset},{center_y_offset})", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                break  # Only process the first detection

    # Display coordinates on a separate window
    coord_img = np.zeros((200, 400, 3), dtype=np.uint8)
    coord_img[:] = (30, 30, 30)  # Background

    if center_x_offset != -1 and center_y_offset != -1:
        text = f"X: {center_x_offset}   Y: {center_y_offset}"
        cv2.putText(coord_img, text, (30, 120), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

    # Show camera and coordinate windows
    cv2.imshow("YOLO Detection", frame)
    cv2.imshow("Coordinates", coord_img)

    # Exit condition
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# --- Cleanup ---
cap.release()
cv2.destroyAllWindows()
arduino.close()
print("Program closed.")
